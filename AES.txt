/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crypt;

import java.io.UnsupportedEncodingException;
import javax.xml.bind.DatatypeConverter;
import static sun.text.normalizer.Utility.hex;

/**
 *
 * @author Moro
 */
public class AES {
    String[][] State,Key;
    String[] Words = new String[44]; // holding words of each key
    int count= 0;
    int round =0;
    AesMatricesMethods a= new AesMatricesMethods();
    AES(){
        for(int i =0; i<44;i++){
            Words[i]= "0";
            
        } 
    }
    String Encrypt(String plainText, String K) throws UnsupportedEncodingException{
         State = new String[4][4];//state matrix
        Key = new String[4][4];//round key matrix
        StringBuilder cipher = new StringBuilder();
        StringBuilder word = new StringBuilder();
        String ciph= "";
          for(int i =0; i<4;i++){
          for(int j =0; j<4;j++){
              //Integer.parseInt(Integer.toHexString((int) K.charAt(count)),16)
      State[j][i] =Integer.toHexString((int)  plainText.charAt(count)); //convert the plaintext characters to Hex and put it in state matrix
      Key[j][i] =Integer.toHexString((int)  K.charAt(count)); 
      word.append(Key[j][i]); 
      count++;
         
     }
          Words[i] =word.toString(); //now words have the first 4 words of the first key only
          word.setLength(0);
          
     }
          count =0;
       
            generateKeys() ;
            System.out.print(" WORDS :");
    for(int i =0 ; i<Words.length;i++) {
        if(i%4==0)
            System.out.print(" KEY " + i/4 + ": ");
          System.out.print(Words[i] + " ");
    }
          System.out.println();
    for(int r =0; r<=9; r++) {
        String element="";
         int col=0;
         int row=0;
           for(int k =(3*r)+(3+r)-3; k<=(3*r)+(3+r); k++) {
               for(int c =0; c<8; c++) {
                    
               element +=Words[k].charAt(c);
               
               if(c%2!=0) {
                   Key[row++][col] = element;
                   element = "";
              
          
               }
      
           }
               row=0;
               col++;
           }
         System.out.println("KEy : " + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(Key[i][j] + " ");
             }
             System.out.println();
         }
     
         State=a.AddRoundKey(State, Key); //State Matrix XOR Key Matrix
         System.out.println("State" + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
          State =a.SBox(State); 
          System.out.println("Sub" + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
           State =a.ShiftRow(State); 
          System.out.println("shift" + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
          if(r!=9) {
            State =a.MixingCol(State); 
          System.out.println("Mix" + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
          }
    }
     int col=0;
         int row=0;
         String element="";
           for(int k =40; k<=43; k++) {
               for(int c =0; c<8; c++) {
                    
               element +=Words[k].charAt(c);
               
               if(c%2!=0) {
                   Key[row++][col] = element;
                   element = "";
              
          
               }
      
           }
               row=0;
               col++;
           }
     
     State=a.AddRoundKey(State, Key);
     System.out.println("Cipher : ");
     for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
         
                 //cipher.append(State[j][i] );
                ciph += "" +State[j][i].charAt(0)  +State[j][i].charAt(1);
              
             }
             System.out.println();
             
         }
     StringBuilder sb = new StringBuilder();
     for (int i = 0; i < ciph.length(); i+=2) {
    String hex = "" + ciph.charAt(i) + ciph.charAt(i+1);
    int ival = Integer.parseInt(hex, 16);
    sb.append((char) ival);
}
     System.out.println("Cipher :" +sb);
        return sb.toString();
    }
    void generateKeys() {
        String Gw;//Will hold the G Functions of words of each round
        for(int i=4; i<44; i++){
            if(i%4==0) {
              Gw =a.GFunction(Words[i-1],round++);
             Words[i] = a.XOR(Words[i-4],Gw);
            }
            else {
             Words[i] = a.XOR(Words[i-4],Words[i-1]);
            
            }
            
        }
        round =0;
        
    }
       String Decrypt(String cipherText, String K) {
        count=0;
        String ciph="";
         State = new String[4][4];
        Key = new String[4][4];//round key matrix
        StringBuilder cipher = new StringBuilder();
        StringBuilder word = new StringBuilder();
          for(int i =0; i<4;i++){
          for(int j =0; j<4;j++){
              //Integer.parseInt(Integer.toHexString((int) K.charAt(count)),16)
       State[j][i] =Integer.toHexString((int)  cipherText.charAt(count));
      Key[j][i] =Integer.toHexString((int)  K.charAt(count)); 
      word.append(Key[j][i]); 
      count++;
         
     }
          Words[i] =word.toString(); //now words have the first 4 words of the first key only
          word.setLength(0);
          
     }
          count =0;
          State[1][3]="02";
       System.out.println("state w232: ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
            generateKeys() ;
            System.out.print(" WORDS :");
    for(int i =0 ; i<Words.length;i++) {
        if(i%4==0)
            System.out.print(" KEY " + i/4 + ": ");
          System.out.print(Words[i] + " ");
    }
          System.out.println();
           int col=0;
         int row=0;
         String element="";
           for(int k =40; k<=43; k++) {
               for(int c =0; c<8; c++) {
                    
               element +=Words[k].charAt(c);
               
               if(c%2!=0) {
                   Key[row++][col] = element;
                   element = "";
              
          
               }
      
           }
               row=0;
               col++;
           }
     
     State=a.AddRoundKey(State, Key);
    for(int r =9; r>=0; r--) {
        
     
            State =a.InvShiftRow(State); 
          System.out.println("Invshift" + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
          State =a.InvSBox(State); 
          System.out.println("Sub" + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
           element="";
      col=0;
          row=0;
           for(int k =(3*r)+(3+r)-3; k<=(3*r)+(3+r); k++) {
               for(int c =0; c<8; c++) {
                    
               element +=Words[k].charAt(c);
               
               if(c%2!=0) {
                   Key[row++][col] = element;
                   element = "";
              
          
               }
      
           }
               row=0;
               col++;
           }
         System.out.println("KEy : " + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(Key[i][j] + " ");
             }
             System.out.println();
         }
         State=a.AddRoundKey(State, Key);
          if(r!=0) {
            State =a.InvMixingCol(State); 
          System.out.println("Mix" + r + ": ");
          for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
             }
             System.out.println();
         }
          }
    }
    
     System.out.println("State : ");
     for(int i =0; i<State.length; i++) {
             for(int j=0; j<State.length; j++){
                  System.out.print(State[i][j] + " ");
                 cipher.append(State[j][i]);
                 //cipher.append(State[j][i] );
                ciph += "" +State[j][i].charAt(0)  +State[j][i].charAt(1);
              
             }
             System.out.println();
             
         }
     StringBuilder sb = new StringBuilder();
     for (int i = 0; i < ciph.length(); i+=2) {
    String hex = "" + ciph.charAt(i) + ciph.charAt(i+1);
    int ival = Integer.parseInt(hex, 16);
    sb.append((char) ival);
}
     System.out.println("Plain Text :" +sb);
        return sb.toString();
    }
}
